{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Desktop\\\\e-shop\\\\client\\\\src\\\\components\\\\Authentication\\\\Register\\\\Register.js\";\nimport RegisterCard from \"../../Card/RegisterCard/RegisterCard\";\nimport './Register.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register__auth__container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register__auth\",\n      children: /*#__PURE__*/_jsxDEV(RegisterCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Register;\n\nconst handleSubmit = async e => {\n  e.preventDefault();\n  const newErrors = {};\n  if (!formData.fname.trim()) newErrors.fname = 'First name is required';\n  if (!formData.lname.trim()) newErrors.lname = 'Last name is required';\n\n  if (!formData.email.trim()) {\n    newErrors.email = 'Email is required';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n    newErrors.email = 'Invalid email format';\n  }\n\n  if (!formData.password || formData.password.length < 6) {\n    newErrors.password = 'Password must be at least 6 characters';\n  }\n\n  setErrors(newErrors);\n  if (Object.keys(newErrors).length > 0) return;\n\n  try {\n    const response = await fetch(\"http://localhost:5000/api/auth/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      alert(data.message || \"Registration failed\");\n    } else {\n      alert(\"Registration successful!\"); // Optional: redirect to login\n    }\n  } catch (error) {\n    console.error(\"Error registering:\", error);\n    alert(\"Server error\");\n  }\n};\n\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["RegisterCard","Register","handleSubmit","e","preventDefault","newErrors","formData","fname","trim","lname","email","test","password","length","setErrors","Object","keys","response","fetch","method","headers","body","JSON","stringify","data","json","ok","alert","message","error","console"],"sources":["C:/Users/asus/OneDrive/Desktop/e-shop/client/src/components/Authentication/Register/Register.js"],"sourcesContent":["import RegisterCard from \"../../Card/RegisterCard/RegisterCard\";\r\nimport './Register.css'\r\n\r\nconst Register = () => {\r\n    return ( \r\n        <div className=\"register__auth__container\">\r\n            <div className=\"register__auth\">\r\n                <RegisterCard />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  const newErrors = {};\r\n\r\n  if (!formData.fname.trim()) newErrors.fname = 'First name is required';\r\n  if (!formData.lname.trim()) newErrors.lname = 'Last name is required';\r\n  if (!formData.email.trim()) {\r\n    newErrors.email = 'Email is required';\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n    newErrors.email = 'Invalid email format';\r\n  }\r\n  if (!formData.password || formData.password.length < 6) {\r\n    newErrors.password = 'Password must be at least 6 characters';\r\n  }\r\n\r\n  setErrors(newErrors);\r\n\r\n  if (Object.keys(newErrors).length > 0) return;\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/auth/register\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(formData)\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      alert(data.message || \"Registration failed\");\r\n    } else {\r\n      alert(\"Registration successful!\");\r\n      // Optional: redirect to login\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error registering:\", error);\r\n    alert(\"Server error\");\r\n  }\r\n};\r\n\r\nexport default Register;"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,sCAAzB;AACA,OAAO,gBAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EACnB,oBACI;IAAK,SAAS,EAAC,2BAAf;IAAA,uBACI;MAAK,SAAS,EAAC,gBAAf;MAAA,uBACI,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CARD;;KAAMA,Q;;AASL,MAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;EACjCA,CAAC,CAACC,cAAF;EAEA,MAAMC,SAAS,GAAG,EAAlB;EAEA,IAAI,CAACC,QAAQ,CAACC,KAAT,CAAeC,IAAf,EAAL,EAA4BH,SAAS,CAACE,KAAV,GAAkB,wBAAlB;EAC5B,IAAI,CAACD,QAAQ,CAACG,KAAT,CAAeD,IAAf,EAAL,EAA4BH,SAAS,CAACI,KAAV,GAAkB,uBAAlB;;EAC5B,IAAI,CAACH,QAAQ,CAACI,KAAT,CAAeF,IAAf,EAAL,EAA4B;IAC1BH,SAAS,CAACK,KAAV,GAAkB,mBAAlB;EACD,CAFD,MAEO,IAAI,CAAC,eAAeC,IAAf,CAAoBL,QAAQ,CAACI,KAA7B,CAAL,EAA0C;IAC/CL,SAAS,CAACK,KAAV,GAAkB,sBAAlB;EACD;;EACD,IAAI,CAACJ,QAAQ,CAACM,QAAV,IAAsBN,QAAQ,CAACM,QAAT,CAAkBC,MAAlB,GAA2B,CAArD,EAAwD;IACtDR,SAAS,CAACO,QAAV,GAAqB,wCAArB;EACD;;EAEDE,SAAS,CAACT,SAAD,CAAT;EAEA,IAAIU,MAAM,CAACC,IAAP,CAAYX,SAAZ,EAAuBQ,MAAvB,GAAgC,CAApC,EAAuC;;EAEvC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAD,EAA4C;MACtEC,MAAM,EAAE,MAD8D;MAEtEC,OAAO,EAAE;QACP,gBAAgB;MADT,CAF6D;MAKtEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,QAAf;IALgE,CAA5C,CAA5B;IAQA,MAAMkB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;IAEA,IAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;MAChBC,KAAK,CAACH,IAAI,CAACI,OAAL,IAAgB,qBAAjB,CAAL;IACD,CAFD,MAEO;MACLD,KAAK,CAAC,0BAAD,CAAL,CADK,CAEL;IACD;EACF,CAjBD,CAiBE,OAAOE,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAoCA,KAApC;IACAF,KAAK,CAAC,cAAD,CAAL;EACD;AACF,CAzCA;;AA2CD,eAAe1B,QAAf"},"metadata":{},"sourceType":"module"}